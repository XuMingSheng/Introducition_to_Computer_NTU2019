function Wall.new 0
push constant 4
call Memory.alloc 1
pop pointer 0
push argument 0
push argument 1
call Vector.new 2
pop this 0
push argument 2
pop this 1
push argument 3
pop this 2
push this 1
push this 2
call Math.multiply 2
pop this 3
push pointer 0
return
function Wall.free 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Wall.x 0
push argument 0
pop pointer 0
push this 0
call Vector.x 1
return
function Wall.y 0
push argument 0
pop pointer 0
push this 0
call Vector.y 1
return
function Wall.length 0
push argument 0
pop pointer 0
push this 1
return
function Wall.width 0
push argument 0
pop pointer 0
push this 2
return
function Wall.life 0
push argument 0
pop pointer 0
push this 3
return
function Wall.appear 6
push argument 0
pop pointer 0
push this 0
call Vector.x 1
pop local 0
push this 0
call Vector.y 1
pop local 1
push local 0
push this 1
push constant 2
call Math.divide 2
sub
pop local 2
push local 1
push this 2
push constant 2
call Math.divide 2
sub
pop local 3
push local 0
push this 1
push constant 2
call Math.divide 2
add
pop local 4
push local 1
push this 2
push constant 2
call Math.divide 2
add
pop local 5
push pointer 0
push argument 1
call Wall.draw_bricks 2
pop temp 0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
call Screen.setColor 1
pop temp 0
push local 2
push this 3
push this 2
call Math.divide 2
push constant 2
call Math.divide 2
add
pop local 2
push local 3
push this 3
push this 1
call Math.divide 2
push constant 2
call Math.divide 2
add
pop local 3
push local 4
push this 3
push this 2
call Math.divide 2
push constant 2
call Math.divide 2
sub
pop local 4
push local 5
push this 3
push this 1
call Math.divide 2
push constant 2
call Math.divide 2
sub
pop local 5
push local 2
push constant 5
add
pop local 2
push local 3
push constant 5
add
pop local 3
push local 4
push constant 5
sub
pop local 4
push local 5
push constant 5
sub
pop local 5
push local 2
push local 4
gt
push local 3
push local 5
gt
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push local 2
push local 3
push local 4
push local 5
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Wall.add_life 0
push argument 0
pop pointer 0
push this 3
push argument 1
add
pop this 3
push constant 0
return
function Wall.vector_to_this 2
push argument 0
pop pointer 0
push this 0
call Vector.x 1
push argument 1
sub
pop local 0
push this 0
call Vector.y 1
push argument 2
sub
pop local 1
push local 0
push constant 0
lt
push local 1
call Math_f.abs 1
push this 1
push constant 2
call Math.divide 2
push argument 3
add
lt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
push constant 0
call Vector.new 2
return
label IF_FALSE0
push local 0
push constant 0
gt
push local 1
call Math_f.abs 1
push this 1
push constant 2
call Math.divide 2
push argument 3
add
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
push constant 0
call Vector.new 2
return
label IF_FALSE1
push local 1
push constant 0
lt
push local 0
call Math_f.abs 1
push this 2
push constant 2
call Math.divide 2
push argument 3
add
lt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
push constant 1
neg
call Vector.new 2
return
label IF_FALSE2
push local 1
push constant 0
gt
push local 0
call Math_f.abs 1
push this 2
push constant 2
call Math.divide 2
push argument 3
add
lt
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
push constant 1
call Vector.new 2
return
label IF_FALSE3
push constant 0
push constant 0
call Vector.new 2
return
function Wall.draw_bricks 5
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
call Vector.x 1
push this 1
push constant 2
call Math.divide 2
sub
push this 0
call Vector.y 1
push this 2
push constant 2
call Math.divide 2
sub
push this 0
call Vector.x 1
push this 1
push constant 2
call Math.divide 2
add
push this 0
call Vector.y 1
push this 2
push constant 2
call Math.divide 2
add
call Screen.drawRectangle 4
pop temp 0
push this 0
call Vector.y 1
push this 2
push constant 2
call Math.divide 2
sub
pop local 0
push constant 0
pop local 1
push constant 0
not
pop local 3
label WHILE_EXP0
push local 0
push this 0
call Vector.y 1
push this 2
push constant 2
call Math.divide 2
add
lt
not
if-goto WHILE_END0
push local 3
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
call Vector.x 1
push this 1
push constant 2
call Math.divide 2
sub
push local 0
push this 0
call Vector.x 1
push this 1
push constant 2
call Math.divide 2
add
push local 0
call Screen.drawLine 4
pop temp 0
push constant 0
pop local 3
goto IF_END0
label IF_FALSE0
push this 0
call Vector.x 1
push this 1
push constant 2
call Math.divide 2
sub
pop local 2
label WHILE_EXP1
push local 2
push this 0
call Vector.x 1
push this 1
push constant 2
call Math.divide 2
add
push constant 1
add
lt
not
if-goto WHILE_END1
push local 1
push constant 5
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
call Screen.setColor 1
pop temp 0
push constant 0
pop local 1
goto IF_END1
label IF_FALSE1
push argument 1
call Screen.setColor 1
pop temp 0
label IF_END1
push local 2
push local 0
call Screen.drawPixel 2
pop temp 0
push local 1
push constant 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push constant 0
not
pop local 3
label IF_END0
push local 1
push constant 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
